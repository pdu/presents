BAT后台开发入门
链表，队列和栈

peng
西七楼

* 经典数据结构

程序 = 算法 + 数据结构

今天给大家介绍如下几个常用的数据结构：

- 链表 linked list
- 队列 queue
- 栈 stack

* 链表 linked list

.image img/linked_list.gif

链表的几个要素：

- 链表是一些节点(node)的顺序组合(sequence)
- 链表中每个节点都包含自身存储的数据(info)，以及指向下一个节点的指针或引用(link)
- 一般链表都有头结点(head)和尾节点(tail)
- 可以在链表的任意位置方便的插入和删除节点

* 链表 linked list

.play -numbers linked_list/main.go /START1 OMIT/,/END1 OMIT/

定义链表的数据结构：

- 第7行：val int是链表中需要保存的信息
	根据实际需求，可以保存任何你想要的信息
- 第8行：next *node是链表中指向下一个节点的link

* 链表 linked list

.play -numbers linked_list/main.go /START2 OMIT/,/END2 OMIT/

定义链表的头结点和尾节点：

- 第66-69行：新建一个node，并赋值给head
- 第70行：把head的引用也赋值给tail
	因为现在链表只有一个节点，所以head和tail是同一个节点

* 链表 linked list

.play -numbers linked_list/main.go /START3 OMIT/,/END3 OMIT/

依次在队列尾部插入新的节点：

- 第74-77行：新建一个node，并且把当前tail的next指向新节点
- 第78行：把tail赋值为新建的node

* 链表 linked list

.play -numbers linked_list/main.go /START4 OMIT/,/END4 OMIT/

遍历链表：

- 第82行：从head节点开始，不断的访问下一个节点，直到下一个节点不存在为止
	iter == nil 即为到链表结束

* 链表 linked list

从之前的例程里可以看出，当前链表里面的val是有序的。现在要插入一些数值，要保证链表还是有序的。

- 要注意插入数据在链表头部，中间和尾部的情况
- 定义好接口：
	func insert(val, head *node, tail *node) (*node, *node)

* 链表 linked list

.play -numbers linked_list/main.go /START6 OMIT/,/END6 OMIT/

* 链表 linked list

删除链表中指定的数值。

- 要注意删除的数据在链表头部，中间和尾部的情况
- 定义好接口：
	func remove(val, head *node, tail *node) (*node, *node)

* 链表 linked list

.play -numbers linked_list/main.go /START8 OMIT/,/END8 OMIT/

* 链表 linked list

对于以上的插入和删除的场景，我没有展示测试用例。希望大家练习的时候可以补充测例，包括各种corner case。

另外Golang是提供了链表的实现的，请大家自行熟悉：

- [[https://golang.org/pkg/container/list/]]

* 链表 linked list

链表的应用很广泛：

- 链表是其他多种数据结构的基础，包括队列，栈，二叉树和各种树结构，稀疏矩阵等
- 操作系统和文件系统的实现中，很多功能底层的数据结构是链表

链表的优点：

- 相对于数组来说，大小可以随时变，不浪费空间。但是在Golang里面有Slice，也有类似的效果
- 可以O(1)复杂度的在任意位置插入和删除数据

链表的缺点：

- 虽然可以O(1)复杂度的插入和删除，但是要获得链表的第k位数，是O(n)复杂度的
- 因为是每次新建node才分配内存，所以会频繁的调用内存allocation，对Golang的GC会有负担，也会有大量的内存碎片

* 队列 queue

.image img/queue.png

队列的几个要素：

- 队列是一些节点(node)的顺序组合(sequence)
- 队列的特性是FIFO，First In First Out，先进先出
- 队列一般基于链表实现，在有些场景下，也可以基于数组实现

* 队列 queue

队列的链表实现方式：

- 插入enqueue
	相当于一直插入链表尾部
- 弹出dequeue
	相当于一直删除链表头部

代码在链表部分已经分析得很详细了，请大家自行实现。

* 队列 queue

上一小节已经说了，链表的使用会频繁的allocate内存，性能不高，有其他更高效的实现方式吗？

有办法解决内存的频繁分配和GC吗？

* 队列 queue

给大家介绍性能优化中，非常重要的一个技巧： *内存池* *Memory* *Pool*

	把需要频繁分配和释放的数据结构，管理起来，放到一个池子中。
	当你需要使用时：先去池子里找，池子里有就拿来直接用；池子里没有才去allocate
	当你使用完之后：把数据结构放回池子里，下次用的时候再取

Golang已经内置了非常优秀的 *Memory* *Pool* 实现：[[https://golang.org/pkg/sync/#Pool]]

	大家可以自己实现Memory Pool优化的队列，我会在“西七楼”小密圈分享我的版本。

* 队列 queue

如果已知队列大小的上限，也可以用数组(Array)来实现队列：

- Array用来提供存储空间，节点的next即为数组中的下一个节点
- 记录两个下标来分表表示head和tail
- 当tail到Array尾部的时候，直接跳转到Array头部
- 如果tail的下标追上了head，就说明Array的空间不够用，直接报错

大家想一想，这里用Array和用Slice的区别？欢迎大家与我讨论。

* 队列 queue

队列的应用非常广泛，其中最典型的就是 *Message* *Queue*

	Message Queue用来在服务端各组件之间做通讯，极大的简化了架构，已成为服务端架构的基础组件。

工业界比较好的开源实现有：

- ActiveMQ: [[http://activemq.apache.org/]]
- RabbitMQ: [[https://www.rabbitmq.com/]]
- ZeroMQ: [[http://zeromq.org/]]
- Redis: [[https://redis.io/]]
	Redis是一个内存数据库，支持非常丰富的数据结构，也可以当Message Queue来使用
	我们后续的项目实战会用到Redis

* 栈 stack

.image img/stack.png

栈的几个要素：

- 栈是一些节点(node)的顺序组合(sequence)
- 栈的特性是LIFO，Last In First Out，后进先出
- 栈一般基于链表实现，在有些场景下，也可以基于数组实现

栈与队列的实现非常相似，除了LIFO和FIFO的区别。

* 栈 stack

栈的链表实现方式：

- 插入push
	相当于一直插入链表尾部
- 弹出pop
	相当于一直删除链表尾部
- top
	相当于一直访问链表尾部

代码在链表部分已经分析得很详细了，请大家自行实现。

* 栈 stack

由于栈与队列的实现方式大同小异，优化部分就不再赘述。

栈的应用：

- 浏览器的前进和后退按钮
	其中的browse history就是用stack来保存的
- 程序中的递归
	想想上一节课中介绍的二分查找的递归写法，递归函数调用的路径，就是用stack来实现的

* 课后作业

开发，需要编码实现以及分析算法复杂度，优劣及应用场景等

	1，链表的插入、删除、查找和遍历等等，并设计完善的测试用例
	2，用链表实现队列和栈

进阶练习

	1，使用sync.Pool实现队列和栈
	2，使用数组Array实现队列和栈

我在 *西七楼* 小密圈等你来答疑。