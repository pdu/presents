BAT后台开发入门
哈希表

peng
西七楼

* 哈希表

.image img/hash_table.png 400 600

哈希表是一个几乎你每天都可能用到的数据结构，必须要掌握！

* 哈希表

哈希表(hash table)是一种把Key和Value映射起来的数据结构，方便快速的查找Key。
哈希表的两大要素：

- 哈希函数(hash function)
	通过hash function，计算Key对应的Index
- 数据存储
	主流的实现方法有开放地址空间法(Open addressing strategy)和链空间法(Chaining)

* 哈希函数

.play -numbers hash_function/main.go

* 哈希函数

哈希函数的主要功能是：输入Key，输出Index。哈希表只是哈希函数的一种用途，主要应用有：

- 哈希表
- 布隆过滤器(bloom filter)
- Key-Value数据库

用于哈希表时，需要根据哈希表的大小来取模，注意负数的情况

* 哈希函数

哈希函数的几大要点：

- 本身计算要快，一不小心哈希函数就成为最消耗CPU的地方
- 生成的Index要分布尽量均匀
- 根据应用场景，选择合适的哈希函数

推荐一个总结的很好的资料：

- [[http://www.cse.yorku.ca/~oz/hash.html]]

Go自身也实现了一些哈希函数：

- [[https://golang.org/pkg/hash/]]

* 哈希函数

哈希函数还可以用来存储加密数据：

	比如用户的密码，需要在数据库中存储为加密后的密文。
	密文一般都很难反向破解，所以即使数据库泄漏了，也不会泄漏用户的密码。

比较常见的几种哈希函数有：

- MD5
- SHA-1
- SHA-2

这些常识性的哈希函数也需要有一些了解。

* 哈希函数

哈希冲突

	哈希函数一般都不是完美的，也就是说不同的Key，有可能会计算出相同的Index。

这就给哈希表的存储带来了一定的困难，如何处理哈希冲突呢？

* 数据存储

数据存储的要素：

- 定义固定大小的数组
	哈希函数算出Index，即为数组对应的下标
- 解决哈希冲突
	链空间法(Chaining)
	开放地址空间法(Open addressing)

* 数据存储

.image img/chaining.png 400 600

链空间法遇到哈希冲突的时候，通过链表把相同Index的数据串起来

* 数据存储

.image img/open_addr.png 400 600

开放地址空间法遇到哈希冲突的时候，直接把数据放在下一个空的位置上

	下一个位置，可以是紧挨着的下一个，也可以是若干间隔之后的位置，也可以是Hash算出来的

* 数据存储

关于哈希表的查询，插入和删除操作，我这里不多讲了，推荐两个总结得很好的资料：

- [[http://www.algolist.net/Data_structures/Hash_table/Chaining]]
- [[http://www.algolist.net/Data_structures/Hash_table/Open_addressing]]

大家记住哈希表的所有操作的复杂度都是O(1)的。

* 数据存储

load factor等于哈希表的数据个数除上哈希表数组大小，是哈希表的性能关键。

	load factor过大，会导致哈希冲突升高，性能降低。
	一般load factor到0.7左右的时候，就要考虑扩容了。

对于在线系统来说，应该怎么对哈希表进行扩容呢？

	这个作为思考题，欢迎大家跟我讨论。
	提示可以参考Memcache的实现。

* 数据存储

一般来说，更常见的实现方式是链空间法，因为简单不容易出错。

但是在工业界也有很多使用开放地址空间法实现的，因为：

- 省空间
- 控制好load factor，性能更好
- 数组相对链表来说，对CPU来讲，Cache miss更少

* Go map

Go的map提供了非常好的hash的实现，考虑如何基于map实现一个简单的Cache系统呢？

支持的功能有：

- 增删查找
- Cache的大小限制为1GB

* 课后作业

- 编程题
	链空间法的哈希表实现，有增删查找功能
- 思考题
	如何在线扩容哈希表？
	如果实现一个简单的Cache系统？